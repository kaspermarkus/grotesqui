(ns grotesqui.fakeql)

;;;;;;;;;;
; current-pipe
; Should always be a reference to the pipe currently displayed in the UI.
(def current-pipe nil)

(defn init-current-pipe [] (def current-pipe (ref '())))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pipe manipulation functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn insert-node
        "Inserts the node into the given pipe-ref."
        ([piperef node] (dosync (alter piperef concat [node])))
        ([piperef node replace-id] (do
		(println (str "new node to replace " replace-id))
		(dosync (alter piperef concat [node])))))

(defmulti node :type)

  ;"Creates a dropzone node with the text 'Drop Zone' and an autogenerated
   ;id: :dropzoneXXX to be used for reference in the UI."
(defmethod node :dropzone
  [props]
  (list "dropzone" {
    :type :dropzone
    :id (keyword (gensym "dropzone"))
    :grotesqui { :text "Drop Zone"}}))

(defmethod node :mysql-in [props] (list "mysql-in" { :type :mysql-in, :id (keyword (gensym "mysql-in"))}))


