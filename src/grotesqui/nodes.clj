(ns grotesqui.nodes
 (:use [seesaw core mig])
	(:require [seesaw.dnd :as dnd])
	(:import javax.swing.TransferHandler))

;(show! (frame :content () :size [640 :by 480]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General UI node handling:
(defmulti node-ui (fn [node] (get (second node) :type)))
	
(defn pipe-ui
	"Creates a graphical representation of the pipe"
	[piperef]
	(grid-panel :columns 1 :items (map node-ui @piperef)))	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; dropzone node
(defn dropzone
	"Creates a dropzone node with the text 'Drop Zone' and an autogenerated
	 id: :dropzoneXXX to be used for reference in the UI."
	[]
	(list "dropzone" {
		:type :dropzone 
		:id (keyword (gensym "dropzone")) 
		:grotesqui { :text "Drop Zone"}}))

;Creates a graphical representation of the node passed to the function and returns it
(defmethod node-ui :dropzone
	[node]
	(let [props (second node) uiprops (get props :grotesqui)] 
		(label
			:text (get uiprops :text)
			:id (get props :id)
			:background "#DDDDDD"
			:transfer-handler [:import 
				[dnd/string-flavor (fn [{:keys [target data]}] (config! target :text data))]])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; FIX THE BELOW
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn mysql-in [] (list "mysql-in" { :type :mysql-in, :id (keyword (gensym "mysql-in"))}))

(defmethod node-ui :mysql-in
	[node]
	  (let [props (second node)] 
    	(label
      	:text "MySQL"
      	:id (get props :id)
      	:background "#DDDDFF")))

(defn mysql-in-palette [describe] 
	(let [ node (label 
		:text ::mysql-in-label 
		:resource ::input
		:drag-enabled? true
		:transfer-handler
			(dnd/default-transfer-handler
				 :export {
         		:actions (constantly :copy)
         		:start   (fn [c] [dnd/string-flavor "mysql-in"])
         		; No :finish needed
         }))]
	
			(do 
				(listen node 
					:mouse-entered (fn [e] (describe ::mysql-in-description))
			 		:mouse-exited (fn [e] (describe))
					:mouse-pressed (fn [evt] (let [comp (.getSource evt)]
						(do (println (.toString (.getTransferHandler comp)))
								(.exportAsDrag (.getTransferHandler comp) comp evt TransferHandler/COPY)))))
	     		node)))
;public void mousePressed(MouseEvent evt) {
;        JComponent comp = (JComponent)evt.getSource();
;        TransferHandler th = comp.getTransferHandler();
;        // Start the drag operation
;        th.exportAsDrag(comp, evt, TransferHandler.COPY);
;    }
