(ns grotesqui.fakeql)

;;;;;;;;;;;
; list of listeners. Get called on every time pipe is updated
(def listeners (ref '()))

(defn add-listener [ func ] (dosync (alter listeners concat [func])))

;;;;;;;;;;
; current-pipe
; Should always be a reference to the pipe currently displayed in the UI.
(def current-pipe nil) 
(defn init-current-pipe [] (def current-pipe (ref '())))

(defmulti node :type)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pipe manipulation functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn replace-node
  "Inserts the node into the given pipe-ref."
  ([pipe new-node replace-id]
    (let 
      [category (get (second new-node) :category)
       splitlist  (split-with (fn [node] (not (= replace-id (get (second node) :id)))) pipe)
       prelist (first splitlist)
       postlist (rest (second splitlist))]
			 (cond
					(= category :input) (concat [new-node (node {:type :dropzone})] postlist)
					(= category :output) (concat prelist [(node {:type :dropzone}) new-node])
					(= category :transformation) 
						(concat prelist [(node {:type :dropzone}) new-node (node {:type :dropzone})] postlist)
					:else (println "ERRORRRRRRRRRRRRRRRRRRRRRRRRRR")))))

(defn insert-node
	"Inserts the node into the given pipe-ref."
	([piperef node] (dosync (alter piperef concat [node])))
	([piperef node replace-id] 
			(do
				(dosync (alter piperef replace-node node replace-id))                                              
				(apply (fn [f] (f)) @listeners))))



  ;"Creates a dropzone node with the text 'Drop Zone' and an autogenerated
   ;id: :dropzoneXXX to be used for reference in the UI."
(defmethod node :dropzone
  [props]
  (list "dropzone" {
    :type :dropzone
    :id (keyword (gensym "dropzone"))
    :grotesqui { :text "Drop Zone"}}))

(defmethod node :csv-in [props] (list "csv-in" { :type :csv-in, :category :input, :id (keyword (gensym "csv-in"))}))
(defmethod node :csv-out [props] (list "csv-out" { :type :csv-out, :category :output, :id (keyword (gensym "csv-out"))}))
(defmethod node :drop-columns [props] (list "drop-columns" { :type :drop-columns, :category :transformation, :id (keyword (gensym "drop-columns"))}))


