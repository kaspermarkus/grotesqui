(ns grotesqui.nodes
 (:use [seesaw core mig])
	(:require [seesaw.dnd :as dnd])
	(:import javax.swing.TransferHandler))

;(show! (frame :content () :size [640 :by 480]))
;;;;;;;;;;;;;
TODO:
we need to create a function that updates the ui with a new pipe... something like:
(config! (select root [:#pipe-panel]) :center (uinodes/pipe-ui current-pipe))
.. this should be setting it, but for some reason this isn't working properly.
perhaps a bug in seesaw
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; dropzone node

(defn dropzone
	"Creates a dropzone node with the text 'Drop Zone' and an autogenerated
	 id: :dropzoneXXX to be used for reference in the UI."
	[]
	(list "dropzone" {:type :dropzone, :text "Drop Zone", :id (keyword (gensym "dropzone"))}))

(defn dropzone-ui
	"Creates a graphical representation of the node passed to the function and returns it"
	[node]
	(let [props (second node)] 
		(label
			:text (get props :text)
			:id (get props :id)
			:background "#DDDDDD"
			:transfer-handler [:import [dnd/string-flavor (fn [{:keys [target data]}] (config! target :text data))]])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General UI node handling:
(defn node-ui
	"Takes a node and creates it's graphical representation"
	[node]
	(let [props (second node)] 
		(cond
			(= :dropzone (get props :type)) (dropzone-ui node)
			:else (println (str "NO MATCH FOR: " (get props :type))))))
	
(defn pipe-ui
	"Creates a graphical representation of the pipe"
	[piperef]
	 (grid-panel :columns 1 :items (map node-ui @piperef)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; FIX THE BELOW
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn mysql-in [describe] 
	(let [ node (label 
		:text ::mysql-in-label 
		:resource ::input
		:drag-enabled? true
		:transfer-handler
			(dnd/default-transfer-handler
				 :export {
         		:actions (constantly :copy)
         		:start   (fn [c] [dnd/string-flavor (config c :text)])
         		; No :finish needed
         }))]
	
			(do (listen node :mouse-entered (fn [e] (describe ::mysql-in-description))
			 				:mouse-exited (fn [e] (describe))
							:mouse-pressed (fn [evt] (let 
								[comp (.getSource evt)]
								(do (println (.toString (.getTransferHandler comp)))
										(.exportAsDrag (.getTransferHandler comp) comp evt TransferHandler/COPY)))))
;public void mousePressed(MouseEvent evt) {
;        JComponent comp = (JComponent)evt.getSource();
;        TransferHandler th = comp.getTransferHandler();
;        // Start the drag operation
;        th.exportAsDrag(comp, evt, TransferHandler.COPY);
;    }
	     		node)))
